{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///E:/magang/afterSchola/projek/lms-afterschola/src/data/users/index.ts"],"sourcesContent":["interface User {\r\n  id: string;\r\n  email: string;\r\n  username: string;\r\n  fullName: string;\r\n  role: \"admin\" | \"instructor\" | \"user\";\r\n  avatar: string;\r\n  phone: string;\r\n  bio: string;\r\n  level: number;\r\n  points: number;\r\n  balance: number;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport const dummyUsers: User[] = [\r\n  // Admin Users\r\n  {\r\n    id: \"admin-1\",\r\n    email: \"admin@afterschola.com\",\r\n    username: \"admin_master\",\r\n    fullName: \"Admin Master\",\r\n    role: \"admin\",\r\n    avatar: \"/avatars/admin-1.jpg\",\r\n    phone: \"+62812345678\",\r\n    bio: \"Platform Administrator with 5+ years experience in educational technology.\",\r\n    level: 10,\r\n    points: 5000,\r\n    balance: 1000000,\r\n    createdAt: new Date(\"2024-01-01\"),\r\n    updatedAt: new Date(\"2024-12-01\"),\r\n  },\r\n  {\r\n    id: \"admin-2\",\r\n    email: \"superadmin@afterschola.com\",\r\n    username: \"super_admin\",\r\n    fullName: \"Super Admin\",\r\n    role: \"admin\",\r\n    avatar: \"/avatars/admin-2.jpg\",\r\n    phone: \"+62887654321\",\r\n    bio: \"Senior Administrator managing platform operations and user experience.\",\r\n    level: 15,\r\n    points: 7500,\r\n    balance: 2000000,\r\n    createdAt: new Date(\"2024-01-01\"),\r\n    updatedAt: new Date(\"2024-12-01\"),\r\n  },\r\n\r\n  // Instructor Users\r\n  {\r\n    id: \"instructor-1\",\r\n    email: \"budi.scratch@afterschola.com\",\r\n    username: \"budi_scratch_master\",\r\n    fullName: \"Budi Santoso\",\r\n    role: \"instructor\",\r\n    avatar: \"/avatars/instructor-1.jpg\",\r\n    phone: \"+62812111222\",\r\n    bio: \"Certified Scratch instructor with 8+ years experience teaching kids programming. Passionate about making coding fun and accessible.\",\r\n    level: 8,\r\n    points: 3200,\r\n    balance: 15000000,\r\n    createdAt: new Date(\"2024-02-15\"),\r\n    updatedAt: new Date(\"2024-12-01\"),\r\n  },\r\n  {\r\n    id: \"instructor-2\",\r\n    email: \"sari.roblox@afterschola.com\",\r\n    username: \"sari_roblox_pro\",\r\n    fullName: \"Sari Wulandari\",\r\n    role: \"instructor\",\r\n    avatar: \"/avatars/instructor-2.jpg\",\r\n    phone: \"+62813333444\",\r\n    bio: \"Professional Roblox game developer and educator. Expert in Lua scripting and game design principles.\",\r\n    level: 9,\r\n    points: 4100,\r\n    balance: 22000000,\r\n    createdAt: new Date(\"2024-02-20\"),\r\n    updatedAt: new Date(\"2024-12-01\"),\r\n  },\r\n  {\r\n    id: \"instructor-3\",\r\n    email: \"andi.games@afterschola.com\",\r\n    username: \"andi_game_dev\",\r\n    fullName: \"Andi Pratama\",\r\n    role: \"instructor\",\r\n    avatar: \"/avatars/instructor-3.jpg\",\r\n    phone: \"+62814555666\",\r\n    bio: \"Multi-platform game developer specializing in both Scratch and Roblox. 6+ years teaching experience.\",\r\n    level: 7,\r\n    points: 2800,\r\n    balance: 12000000,\r\n    createdAt: new Date(\"2024-03-01\"),\r\n    updatedAt: new Date(\"2024-12-01\"),\r\n  },\r\n\r\n  // Student Users\r\n  {\r\n    id: \"user-1\",\r\n    email: \"rian.student@gmail.com\",\r\n    username: \"rian_coder\",\r\n    fullName: \"Rian Nugraha\",\r\n    role: \"user\",\r\n    avatar: \"/avatars/abdul.jpg\",\r\n    phone: \"+62815777888\",\r\n    bio: \"Passionate young programmer learning Scratch and game development.\",\r\n    level: 3,\r\n    points: 850,\r\n    balance: 150000,\r\n    createdAt: new Date(\"2024-05-10\"),\r\n    updatedAt: new Date(\"2024-12-01\"),\r\n  },\r\n  {\r\n    id: \"user-2\",\r\n    email: \"maya.gamer@gmail.com\",\r\n    username: \"maya_builder\",\r\n    fullName: \"Maya Sari\",\r\n    role: \"user\",\r\n    avatar: \"/avatars/user-2.jpg\",\r\n    phone: \"+62816999000\",\r\n    bio: \"Creative student interested in building games and interactive stories.\",\r\n    level: 4,\r\n    points: 1200,\r\n    balance: 200000,\r\n    createdAt: new Date(\"2024-06-15\"),\r\n    updatedAt: new Date(\"2024-12-01\"),\r\n  },\r\n  {\r\n    id: \"user-3\",\r\n    email: \"dimas.junior@gmail.com\",\r\n    username: \"dimas_scratch\",\r\n    fullName: \"Dimas Pratama\",\r\n    role: \"user\",\r\n    avatar: \"/avatars/user-3.jpg\",\r\n    phone: \"+62817111222\",\r\n    bio: \"Beginner in programming, excited to learn Scratch and create my first game.\",\r\n    level: 1,\r\n    points: 320,\r\n    balance: 50000,\r\n    createdAt: new Date(\"2024-08-20\"),\r\n    updatedAt: new Date(\"2024-12-01\"),\r\n  },\r\n  {\r\n    id: \"user-4\",\r\n    email: \"nina.creative@gmail.com\",\r\n    username: \"nina_artist\",\r\n    fullName: \"Nina Kusuma\",\r\n    role: \"user\",\r\n    avatar: \"/avatars/user-4.jpg\",\r\n    phone: \"+62818333444\",\r\n    bio: \"Art student learning to combine creativity with programming through visual coding.\",\r\n    level: 2,\r\n    points: 680,\r\n    balance: 125000,\r\n    createdAt: new Date(\"2024-07-05\"),\r\n    updatedAt: new Date(\"2024-12-01\"),\r\n  },\r\n  {\r\n    id: \"user-5\",\r\n    email: \"fajar.gamer@gmail.com\",\r\n    username: \"fajar_roblox\",\r\n    fullName: \"Fajar Ramadhan\",\r\n    role: \"user\",\r\n    avatar: \"/avatars/user-5.jpg\",\r\n    phone: \"+62819555666\",\r\n    bio: \"Roblox enthusiast learning to create my own games and experiences.\",\r\n    level: 5,\r\n    points: 1850,\r\n    balance: 300000,\r\n    createdAt: new Date(\"2024-04-12\"),\r\n    updatedAt: new Date(\"2024-12-01\"),\r\n  },\r\n];\r\n\r\n// Helper functions\r\nexport const getUserById = (id: string): User | undefined => {\r\n  return dummyUsers.find((user) => user.id === id);\r\n};\r\n\r\nexport const getUsersByRole = (\r\n  role: \"admin\" | \"instructor\" | \"user\"\r\n): User[] => {\r\n  return dummyUsers.filter((user) => user.role === role);\r\n};\r\n\r\nexport const getAdmins = (): User[] => getUsersByRole(\"admin\");\r\nexport const getInstructors = (): User[] => getUsersByRole(\"instructor\");\r\nexport const getStudents = (): User[] => getUsersByRole(\"user\");\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAgBO,MAAM,aAAqB;IAChC,cAAc;IACd;QACE,IAAI;QACJ,OAAO;QACP,UAAU;QACV,UAAU;QACV,MAAM;QACN,QAAQ;QACR,OAAO;QACP,KAAK;QACL,OAAO;QACP,QAAQ;QACR,SAAS;QACT,WAAW,IAAI,KAAK;QACpB,WAAW,IAAI,KAAK;IACtB;IACA;QACE,IAAI;QACJ,OAAO;QACP,UAAU;QACV,UAAU;QACV,MAAM;QACN,QAAQ;QACR,OAAO;QACP,KAAK;QACL,OAAO;QACP,QAAQ;QACR,SAAS;QACT,WAAW,IAAI,KAAK;QACpB,WAAW,IAAI,KAAK;IACtB;IAEA,mBAAmB;IACnB;QACE,IAAI;QACJ,OAAO;QACP,UAAU;QACV,UAAU;QACV,MAAM;QACN,QAAQ;QACR,OAAO;QACP,KAAK;QACL,OAAO;QACP,QAAQ;QACR,SAAS;QACT,WAAW,IAAI,KAAK;QACpB,WAAW,IAAI,KAAK;IACtB;IACA;QACE,IAAI;QACJ,OAAO;QACP,UAAU;QACV,UAAU;QACV,MAAM;QACN,QAAQ;QACR,OAAO;QACP,KAAK;QACL,OAAO;QACP,QAAQ;QACR,SAAS;QACT,WAAW,IAAI,KAAK;QACpB,WAAW,IAAI,KAAK;IACtB;IACA;QACE,IAAI;QACJ,OAAO;QACP,UAAU;QACV,UAAU;QACV,MAAM;QACN,QAAQ;QACR,OAAO;QACP,KAAK;QACL,OAAO;QACP,QAAQ;QACR,SAAS;QACT,WAAW,IAAI,KAAK;QACpB,WAAW,IAAI,KAAK;IACtB;IAEA,gBAAgB;IAChB;QACE,IAAI;QACJ,OAAO;QACP,UAAU;QACV,UAAU;QACV,MAAM;QACN,QAAQ;QACR,OAAO;QACP,KAAK;QACL,OAAO;QACP,QAAQ;QACR,SAAS;QACT,WAAW,IAAI,KAAK;QACpB,WAAW,IAAI,KAAK;IACtB;IACA;QACE,IAAI;QACJ,OAAO;QACP,UAAU;QACV,UAAU;QACV,MAAM;QACN,QAAQ;QACR,OAAO;QACP,KAAK;QACL,OAAO;QACP,QAAQ;QACR,SAAS;QACT,WAAW,IAAI,KAAK;QACpB,WAAW,IAAI,KAAK;IACtB;IACA;QACE,IAAI;QACJ,OAAO;QACP,UAAU;QACV,UAAU;QACV,MAAM;QACN,QAAQ;QACR,OAAO;QACP,KAAK;QACL,OAAO;QACP,QAAQ;QACR,SAAS;QACT,WAAW,IAAI,KAAK;QACpB,WAAW,IAAI,KAAK;IACtB;IACA;QACE,IAAI;QACJ,OAAO;QACP,UAAU;QACV,UAAU;QACV,MAAM;QACN,QAAQ;QACR,OAAO;QACP,KAAK;QACL,OAAO;QACP,QAAQ;QACR,SAAS;QACT,WAAW,IAAI,KAAK;QACpB,WAAW,IAAI,KAAK;IACtB;IACA;QACE,IAAI;QACJ,OAAO;QACP,UAAU;QACV,UAAU;QACV,MAAM;QACN,QAAQ;QACR,OAAO;QACP,KAAK;QACL,OAAO;QACP,QAAQ;QACR,SAAS;QACT,WAAW,IAAI,KAAK;QACpB,WAAW,IAAI,KAAK;IACtB;CACD;AAGM,MAAM,cAAc,CAAC;IAC1B,OAAO,WAAW,IAAI,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;AAC/C;AAEO,MAAM,iBAAiB,CAC5B;IAEA,OAAO,WAAW,MAAM,CAAC,CAAC,OAAS,KAAK,IAAI,KAAK;AACnD;AAEO,MAAM,YAAY,IAAc,eAAe;AAC/C,MAAM,iBAAiB,IAAc,eAAe;AACpD,MAAM,cAAc,IAAc,eAAe","debugId":null}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///E:/magang/afterSchola/projek/lms-afterschola/src/hooks/useAuth.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport {\r\n  useState,\r\n  useEffect,\r\n  createContext,\r\n  useContext,\r\n  ReactNode,\r\n} from \"react\";\r\nimport { User, LoginCredentials, SignupData } from \"../types\";\r\nimport { dummyUsers } from \"../data/users\";\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  login: (\r\n    credentials: LoginCredentials\r\n  ) => Promise<{ success: boolean; error?: string }>;\r\n  signup: (data: SignupData) => Promise<{ success: boolean; error?: string }>;\r\n  logout: () => void;\r\n  loading: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport function AuthProvider({ children }: { children: ReactNode }) {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for stored user session\r\n    const storedUser = localStorage.getItem(\"afterschola_user\");\r\n    if (storedUser) {\r\n      try {\r\n        setUser(JSON.parse(storedUser));\r\n      } catch (error) {\r\n        console.error(\"Error parsing stored user:\", error);\r\n        localStorage.removeItem(\"afterschola_user\");\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (\r\n    credentials: LoginCredentials\r\n  ): Promise<{ success: boolean; error?: string }> => {\r\n    setLoading(true);\r\n\r\n    // Simulate API call delay\r\n    await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n    // Find user in dummy data\r\n    const foundUser = dummyUsers.find(\r\n      (u) => u.email.toLowerCase() === credentials.email.toLowerCase()\r\n    );\r\n\r\n    if (!foundUser) {\r\n      setLoading(false);\r\n      return { success: false, error: \"Email tidak ditemukan\" };\r\n    }\r\n\r\n    // In real app, you would verify password hash\r\n    // For demo, we'll just check if password is not empty\r\n    if (!credentials.password) {\r\n      setLoading(false);\r\n      return { success: false, error: \"Password salah\" };\r\n    }\r\n\r\n    // Store user session\r\n    localStorage.setItem(\"afterschola_user\", JSON.stringify(foundUser));\r\n    localStorage.setItem(\"userRole\", foundUser.role);\r\n    setUser(foundUser);\r\n    setLoading(false);\r\n\r\n    return { success: true };\r\n  };\r\n\r\n  const signup = async (\r\n    data: SignupData\r\n  ): Promise<{ success: boolean; error?: string }> => {\r\n    setLoading(true);\r\n\r\n    // Simulate API call delay\r\n    await new Promise((resolve) => setTimeout(resolve, 1500));\r\n\r\n    // Check if email already exists\r\n    const existingUser = dummyUsers.find(\r\n      (u) => u.email.toLowerCase() === data.email.toLowerCase()\r\n    );\r\n\r\n    if (existingUser) {\r\n      setLoading(false);\r\n      return { success: false, error: \"Email sudah terdaftar\" };\r\n    }\r\n\r\n    // Check if username already exists\r\n    const existingUsername = dummyUsers.find(\r\n      (u) => u.username.toLowerCase() === data.username.toLowerCase()\r\n    );\r\n\r\n    if (existingUsername) {\r\n      setLoading(false);\r\n      return { success: false, error: \"Username sudah digunakan\" };\r\n    }\r\n\r\n    // Create new user\r\n    const newUser: User = {\r\n      id: `user-${Date.now()}`,\r\n      email: data.email,\r\n      username: data.username,\r\n      fullName: data.fullName,\r\n      role: \"user\",\r\n      level: 1,\r\n      points: 0,\r\n      balance: 0,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n    };\r\n\r\n    // Store user session\r\n    localStorage.setItem(\"afterschola_user\", JSON.stringify(newUser));\r\n    localStorage.setItem(\"userRole\", newUser.role);\r\n    setUser(newUser);\r\n    setLoading(false);\r\n\r\n    return { success: true };\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"afterschola_user\");\r\n    localStorage.removeItem(\"userRole\");\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, signup, logout, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useAuth() {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n}\r\n\r\n// Demo login credentials for testing\r\nexport const demoCredentials = {\r\n  admin: {\r\n    email: \"admin@afterschola.com\",\r\n    password: \"admin123\",\r\n  },\r\n  instructor: {\r\n    email: \"budi.scratch@afterschola.com\",\r\n    password: \"instructor123\",\r\n  },\r\n  student: {\r\n    email: \"rian.student@gmail.com\",\r\n    password: \"student123\",\r\n  },\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}}]
}